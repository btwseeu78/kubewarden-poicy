apiVersion: policies.kubewarden.io/v1
kind: ClusterAdmissionPolicy
metadata:
  annotations:
    io.kubewarden.policy.category: Best practices
    io.kubewarden.policy.severity: low
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"policies.kubewarden.io/v1","kind":"ClusterAdmissionPolicy","metadata":{"annotations":{"io.kubewarden.policy.category":"Best practices","io.kubewarden.policy.severity":"low"},"name":"check-pods-with-same-names"},"spec":{"contextAwareResources":[{"apiVersion":"v1","kind":"Configmap"}],"failurePolicy":"Ignore","module":"registry://ghcr.io/kubewarden/policies/cel-policy:v1.0.0","mutating":false,"rules":[{"apiGroups":[""],"apiVersions":["v1"],"operations":["CREATE"],"resources":["ConfigMap"]}],"settings":{"validations":[{"expression":"variables.cmName.size() == 0\n","message":"Cannot reuse a host across multiple ingresses"}],"variables":[{"expression":"kw.k8s.apiVersion('v1').kind('Configmap').list().items\n","name":"knownCm"},{"expression":"variables.knownCm\n.filter(i, (i.metadata.name != object.metadata.name) \u0026\u0026 (i.metadata.namespace == object.metadata.namespace))\n.map(i,i.metadata.name)\n","name":"cmName"}]}}}
  creationTimestamp: "2024-10-25T09:33:19Z"
  finalizers:
  - kubewarden.io/finalizer
  generation: 1
  name: check-pods-with-same-names
  resourceVersion: "23530712"
  uid: 802b3d0b-aab2-415f-8a97-c25d427fc814
spec:
  backgroundAudit: true
  contextAwareResources:
  - apiVersion: v1
    kind: Configmap
  failurePolicy: Ignore
  mode: protect
  module: registry://ghcr.io/kubewarden/policies/cel-policy:v1.0.0
  mutating: false
  policyServer: default
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - ConfigMap
  settings:
    validations:
    - expression: |
        variables.cmName.size() == 0
      message: Cannot reuse a host across multiple ingresses
    variables:
    - expression: |
        kw.k8s.apiVersion('v1').kind('Configmap').list().items
      name: knownCm
    - expression: |
        variables.knownCm
        .filter(i, (i.metadata.name != object.metadata.name) && (i.metadata.namespace == object.metadata.namespace))
        .map(i,i.metadata.name)
      name: cmName
  timeoutSeconds: 10
status:
  conditions:
  - lastTransitionTime: "2024-10-26T16:35:45Z"
    message: The policy webhook has been created
    reason: PolicyActive
    status: "True"
    type: PolicyActive
  - lastTransitionTime: "2024-10-26T16:35:44Z"
    message: The latest replica set is uniquely reachable
    reason: LatestReplicaSetIsUniquelyReachable
    status: "True"
    type: PolicyUniquelyReachable
  - lastTransitionTime: "2024-10-26T13:52:59Z"
    message: Configuration for this policy is up to date
    reason: ConfigurationVersionMatch
    status: "True"
    type: PolicyServerConfigurationUpToDate
  mode: protect
  policyStatus: active
